{"version":3,"file":"js/728.7dc5309d.js","mappings":"6LACOA,MAAM,Y,GACJA,MAAM,Y,GAEFA,MAAM,c,iBAEFA,MAAM,a,+iOALrBC,EAAAA,EAAAA,IAsXM,MAtXN,EAsXM,EArXJC,EAAAA,EAAAA,GAcM,MAdN,EAcM,EAbJC,EAAAA,EAAAA,IASaC,EAAAA,GAAA,CATDC,KAAK,QAAM,C,kBACrB,IAOM,WAPNH,EAAAA,EAAAA,GAOM,MAPN,EAOM,gBANJD,EAAAA,EAAAA,IAKMK,EAAAA,GAAA,MAAAC,EAAAA,EAAAA,IALmBC,EAAAA,MAAI,CAAhBC,EAAMC,M,WAAnBT,EAAAA,EAAAA,IAKM,OAL0BU,IAAKD,EAAGV,MAAM,YAAaY,QAAK,GAAEC,EAAAA,QAAQJ,EAAKK,WAA/E,EACEZ,EAAAA,EAAAA,GAEM,MAFN,GAEMa,EAAAA,EAAAA,IADDN,EAAKJ,MAAI,IAFhB,eADF,YAAgCG,EAAAA,c,OAUlCN,EAAAA,EAAAA,GAC6B,KAD1BF,MAAM,mBAAmBgB,MAAA,2EACzBJ,QAAK,oBAAEC,EAAAA,eAAAA,EAAAA,iBAAAA,QAEZI,G,CA0WJ,OACEC,KAAM,KAAM,CACVC,SAAS,EACTC,KAAM,CACJ,CACEf,KAAM,SACNS,SAAU,OAEZ,CACET,KAAM,MACNS,SAAU,OAEZ,CACET,KAAM,WACNS,SAAU,OAEZ,CACET,KAAM,cACNS,SAAU,OAEZ,CACET,KAAM,YACNS,SAAU,OAEZ,CACET,KAAM,OACNS,SAAU,OAEZ,CACET,KAAM,UACNS,SAAU,OAEZ,CACET,KAAM,YACNS,SAAU,OAEZ,CACET,KAAM,gBACNS,SAAU,OAEZ,CACET,KAAM,eACNS,SAAU,OAEZ,CACET,KAAM,SACNS,SAAU,OAEZ,CACET,KAAM,OACNS,SAAU,UAIhBO,QAAS,CACPC,gBACE,IAAIC,EAAOC,KACXD,EAAKJ,SAAWI,EAAKJ,OACtB,EACDM,QAAQC,GAON,OANAC,EAAE,aAAaC,QACb,CACEC,UAAWF,EAAE,IAAMD,GAAII,SAASC,KAElC,SAEK,CACT,I,SCvbJ,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAEzF,O","sources":["webpack://myweb/./src/views/JSView.vue","webpack://myweb/./src/views/JSView.vue?e228"],"sourcesContent":["<template>\n  <div class=\"home all\">\n    <div class=\"vue-menu\">\n      <transition name=\"fade\">\n        <div class=\"menu-items\" v-show=\"display\">\n          <div v-for=\"(item, i) in menu\" :key=\"i\" class=\"menu-item\" @click=\"toWhere(item.bookmark)\">\n            <div class=\"menu-text\">\n              {{ item.name }}\n            </div>\n\n          </div>\n        </div>\n      </transition>\n\n      <i class=\"fa-solid fa-bars\" style=\"cursor: pointer;font-size:30px;color:#FFFFFF;margin-left: 10px;\"\n        @click=\"displayToggle\"></i>\n    </div>\n    <div class=\"vue-content\">\n      <div class=\"jsView\">\n        <div>\n          <div class=\"containHeader\">\n            其他\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"aaa\">\n          <div class=\"divL\">\n\n            <div class=\"divTitle\">\n              <h2>\n                取得現在日期\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n          <pre>\nvar now=new Date().toLocaleString()\n          </pre>\n        </code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                是否為本基測試\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\nif (location.hostname == \"localhost\") {\n     \n} else {\n       \n}\n</pre>\n</code>\n            </div>\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"fff\">\n          <div class=\"divL\">\n\n            <div class=\"divTitle\">\n              <h2>\n                檢查是否為空物件\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\nfunction isEmpty(obj) {\nfor(var key in obj) {\nif(obj.hasOwnProperty(key))\nreturn false;\n}\nreturn true;\n}\n</pre>\n</code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                async 與 await\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\nfunction asyncFunc1(url) {\n  return new Promise((resolve, reject) => {\n    resolve(someValue);         // 完成\n    reject(\"failure reason\");   // 拒絕\n  });\n};\n\nfunction asyncFunc2(url) {\n  return new Promise((resolve, reject) => {\n  // resolve() or reject()\n  });\n};\n\nconst asyncCall = async () => {\nconst result1 = await asyncFunc1();\nconst result2 = await asyncFunc2();\n};\n</pre>\n</code>\n            </div>\n          </div>\n\n        </div>\n        <div>\n          <div class=\"containHeader\">\n            字串\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"bbb\">\n          <div class=\"divL\">\n\n            <div class=\"divTitle\">\n              <h2>\n                字串去頭去尾\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\n\nstr.slice(start,end)\n\"123456789\".slice(0,3)   ====>   '123'\n\"123456789\".slice(1,4)   ====>   '234'\n\"123456789\".slice(0,-1)   ====>   '12345678'  去尾\n\"123456789\".slice(1,-1)   ====>   '2345678'   去頭去尾\n</pre>\n</code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                刪除字串中的 \".\"\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n          <pre>\nvar x = \"我.我.我.我.我.我.我\";\nx.replace(/[.]/g,\"\");\n\n=>我我我我我我我\n          </pre>\n        </code>\n            </div>\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"ccc\">\n          <div class=\"divL\">\n            <div class=\"divTitle\">\n              <h2>\n                去除字符串空格(空白符)\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\n去除字符串內所有的空格：str = str.replace(/\\s*/g,\"\");\n\n去除字符串內兩頭的空格：str = str.replace(/^\\s*|\\s*$/g,\"\");\n\n去除字符串內左側的空格：str = str.replace(/^\\s*/,\"\");\n\n去除字符串內右側的空格：str = str.replace(/(\\s*$)/g,\"\");\n</pre>\n</code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                字串是否包含某字串\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n\n    <li>indexOf() 方法可返回某個指定的字串值在字串中首次出現的位置。如果要檢索的字串值沒有出現，則該方法返回 -1。\n    </li>\nvar str = \"123\";\nconsole.log(str.indexOf(\"3\") != -1 );  // true\n    <li>search() 方法用於檢索字串中指定的子字串，或檢索與正則表示式相匹配的子字串。如果沒有找到任何匹配的子串，則返回 -1。。\n    </li>\nvar str = \"123\";\nconsole.log(str.search(\"3\") != -1 );  // true\n</code>\n            </div>\n          </div>\n\n        </div>\n        <div>\n          <div class=\"containHeader\">\n            陣列\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"ddd\">\n          <div class=\"divL\">\n\n            <div class=\"divTitle\">\n              <h2>\n                取集合\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\nvar setA = [1,1,2,3,3];\nvar setB = [...new Set(setA)];\n\n==> setB = [1,2,3];\n</pre>\n</code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                陣列打平\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n  <pre>\nvar myArray = [[1, 2],[3, 4, 5], [6, 7, 8, 9]];\n[].concat(...myArray);\n\n=>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n  </pre>\n</code>\n            </div>\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"eee\">\n          <div class=\"divL\">\n            <div class=\"divTitle\">\n              <h2>\n                陣列排序\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\nc = [3, -1, -2]\nc.sort()                             ====>  [-1,-2,3]\nc.sort(function(a,b){return a-b})    ====>  [-2,-1,3]   可排負數        \n</pre>\n</code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                回傳符合條件的元素，得到一個新陣列。\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\nvar arr = [1,2,3,4,5];\narr.filter(function(value) {\nreturn value > 3;\n});\n\n=>[4,5]\n    \n</pre>\n</code>\n            </div>\n          </div>\n\n        </div>\n        <div class=\"divClass\" id=\"eee\">\n          <div class=\"divL\">\n            <div class=\"divTitle\">\n              <h2>\n                Map\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\n1. let myMap = new Map();\n\n2. let myMap = new Map([\n      [1, 'one'],\n      [2, 'two'],\n    ]);\n\n3. var numbers = [1, 4, 9];\n   var roots = numbers.map(Math.sqrt); //map會return一個新的array roots==>[1, 2, 3]\n\n4. object to map :\n   let obj = {\n     name: \"John\",\n     age: 30\n   };\n   let map = new Map(Object.entries(obj));\n\n</pre>\n</code>\n            </div>\n          </div>\n          <div class=\"divR\">\n            <div class=\"divTitle\">\n              <h2>\n                Map (hash table)\n              </h2>\n            </div>\n            <div class=\"divContent\">\n              <code>\n<pre>\n基本用法\n  new Map() —— 創建 map。\n  map.set(key, value) —— 輸入 key-value 儲存值。\n  map.get(key) —— 根據key来返回值，如果 map 中不存在對應的 key，則返回 undefined。\n  map.has(key) —— 如果 key 存在則返回 true，否則返回 false。\n  map.delete(key) —— 刪除指定key的值。\n  map.clear() —— 清空 map。\n  map.size —— 返回當前元素個數。\n\nMap 迭代\n  let recipeMap = new Map([\n    ['cucumber', 500],\n    ['tomatoes', 350],\n    ['onion',    50]\n  ]);\n\n  1. map.keys()        \n    for (let vegetable of recipeMap.keys()) {\n      console.log(vegetable); // cucumber, tomatoes, onion\n    }\n  2. map.values()\n    for (let amount of recipeMap.values()) {\n      console.log(amount); // 500, 350, 50\n    }\n  3. map.entries()\n    for (let entry of recipeMap) { \n      console.log(entry); // cucumber,500\n    }\n  4. 歷遍 Map\n    for (var [key, value] of recipeMap) {\n      console.log(key + ' = ' + value);\n    }\n  5. Map合併\n    var merged = new Map([...firstMap, ...secondMap]);\n\n</pre>\n</code>\n            </div>\n          </div>\n\n        </div>\n\n\n\n\n\n      </div>\n    </div>\n  </div>\n\n</template>\n<script>\nexport default {\n  data: () => ({\n    display: false,\n    menu: [\n      {\n        name: \"取得現在日期\",\n        bookmark: \"aaa\"\n      },\n      {\n        name: \"取集合\",\n        bookmark: \"aaa\"\n      },\n      {\n        name: \"檢查是否為空物件\",\n        bookmark: \"bbb\"\n      },\n      {\n        name: \"刪除字串中的 '.' \",\n        bookmark: \"bbb\"\n      },\n      {\n        name: \"回傳符合條件的元素\",\n        bookmark: \"ccc\"\n      },\n      {\n        name: \"陣列打平\",\n        bookmark: \"ccc\"\n      },\n      {\n        name: \"是否為本基測試\",\n        bookmark: \"ddd\"\n      },\n      {\n        name: \"字串是否包含某字串\",\n        bookmark: \"ddd\"\n      },\n      {\n        name: \"async 與 await\",\n        bookmark: \"eee\"\n      },\n      {\n        name: \"去除字符串空格(空白符)\",\n        bookmark: \"eee\"\n      },\n      {\n        name: \"字串去頭去尾\",\n        bookmark: \"fff\"\n      },\n      {\n        name: \"陣列排序\",\n        bookmark: \"fff\"\n      }\n    ]\n  }),\n  methods: {\n    displayToggle() {\n      var self = this;\n      self.display = !self.display;\n    },\n    toWhere(da) {\n      $(\"html,body\").animate(\n        {\n          scrollTop: $(\"#\" + da).offset().top\n        },\n        \"show\"\n      );\n      return false;\n    }\n  },\n}\n</script>\n<style lang=\"scss\" scoped>\nli {\n  margin-top: 50px !important;\n}\n</style>","import { render } from \"./JSView.vue?vue&type=template&id=142eb165&scoped=true\"\nimport script from \"./JSView.vue?vue&type=script&lang=js\"\nexport * from \"./JSView.vue?vue&type=script&lang=js\"\n\nimport \"./JSView.vue?vue&type=style&index=0&id=142eb165&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\myGit\\\\myWebsite1\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-142eb165\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_createElementVNode","_createVNode","_Transition","name","_Fragment","_renderList","_ctx","item","i","key","onClick","$options","bookmark","_toDisplayString","style","_hoisted_6","data","display","menu","methods","displayToggle","self","this","toWhere","da","$","animate","scrollTop","offset","top","__exports__","render"],"sourceRoot":""}